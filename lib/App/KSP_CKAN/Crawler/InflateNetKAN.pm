package App::KSP_CKAN::Crawler::InflateNetKAN;

use v5.010;
use strict;
use warnings;
use autodie;
use Method::Signatures 20140224;
use File::chdir;
use Scalar::Util 'reftype';
use Carp qw(croak);
use Moo;
use namespace::clean;

extends 'App::KSP_CKAN::NetKAN';

# ABSTRACT: Used as part of the Crawler to re-inflate CKANs

# VERSION: Generated by DZP::OurPkg:Version

=head1 SYNOPSIS

  use App::KSP_CKAN::Crawler::InflateNetKAN;

  my $inflater = App::KSP_CKAN::Crawler::InflateNetKAN->new( config => $confg );
  $inflater->inflate( "AwesomeMod.netkan" );

=head1 DESCRIPTION

Webhook wrapper for NetKAN inflation on demand.

=cut

my $Ref = sub {
  croak("config isn't a 'App::KSP_CKAN::Tools::Config' object!") unless $_[0]->DOES("App::KSP_CKAN::Tools::Config");
};

my $Meta = sub {
  croak("CKAN_meta isn't a 'App::KSP_CKAN::Tools::Git' object!") unless $_[0]->DOES("App::KSP_CKAN::Tools::Git");
};

has 'config'      => ( is => 'ro', required => 1, isa => $Ref );
has 'CKAN_meta'   => ( is => 'ro', required => 1, isa => $Meta );
has '_CKAN_meta'  => ( is => 'ro', builder => 1, lazy => 1 );

method _build__CKAN_meta {
  return $self->CKAN_meta;
}

method push_ckan_meta {
  $self->_push;
}

method inflate(:$files, :$cache) {
  # Lets take an array as well! 
  my @files = reftype \$files ne "SCALAR" ? @{$files} : $files;

  # Prepare Enironment
  $self->_mirror_files;
  $self->_CKAN_meta->_clean; # TODO: expose this method properly
  $self->_CKAN_meta->pull;

  my @success;
  foreach my $file (@files) {
    if (! -e $file) {
      $self->warn("The file '".$file."' doesn't appear to exist");
      next;
    }

    my $config = $self->config;
    my $netkan = App::KSP_CKAN::Tools::NetKAN->new(
      config      => $config,
      file        => $file,
      ckan_meta   => $self->_CKAN_meta,
      cache       => $cache,
      status      => $self->_status,
      rescan      => 1,
    );

    # The netkan tool returns an error code > 0 on failure
    if ($netkan->inflate == 0) {
      push(@success, $file);
    }
  }


  # TODO: We're never going to want a status on the main project but
  #       we can probably replace it with something of in here.
  return @success;
}

1;
